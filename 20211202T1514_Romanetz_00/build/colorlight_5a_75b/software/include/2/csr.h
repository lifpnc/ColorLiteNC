//--------------------------------------------------------------------------------
// Auto-generated by Migen (bee558c) & LiteX (756503ab) on 2021-10-24 00:32:27
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
//#include <system.h>
//#ifndef CSR_ACCESSORS_DEFINED
//#include <hw/common.h>
//#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0x0L
#endif

/* MMIO_inst */
#define CSR_MMIO_INST_BASE (CSR_BASE + 0x0L)
#define CSR_MMIO_INST_VELOCITY1_ADDR (CSR_BASE + 0x0L)
#define CSR_MMIO_INST_VELOCITY1_SIZE 1
static inline uint32_t MMIO_inst_velocity1_read(void) {
	return csr_read_simple(CSR_BASE + 0x0L);
}
static inline void MMIO_inst_velocity1_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x0L);
}
#define CSR_MMIO_INST_DIRTIME1_ADDR (CSR_BASE + 0x4L)
#define CSR_MMIO_INST_DIRTIME1_SIZE 1
static inline uint32_t MMIO_inst_dirtime1_read(void) {
	return csr_read_simple(CSR_BASE + 0x4L);
}
static inline void MMIO_inst_dirtime1_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4L);
}
#define CSR_MMIO_INST_STEPTIME1_ADDR (CSR_BASE + 0x8L)
#define CSR_MMIO_INST_STEPTIME1_SIZE 1
static inline uint32_t MMIO_inst_steptime1_read(void) {
	return csr_read_simple(CSR_BASE + 0x8L);
}
static inline void MMIO_inst_steptime1_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x8L);
}
#define CSR_MMIO_INST_ENABLE1_ADDR (CSR_BASE + 0xcL)
#define CSR_MMIO_INST_ENABLE1_SIZE 1
static inline uint32_t MMIO_inst_enable1_read(void) {
	return csr_read_simple(CSR_BASE + 0xcL);
}
static inline void MMIO_inst_enable1_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0xcL);
}
#define CSR_MMIO_INST_TAP1_ADDR (CSR_BASE + 0x10L)
#define CSR_MMIO_INST_TAP1_SIZE 1
static inline uint32_t MMIO_inst_tap1_read(void) {
	return csr_read_simple(CSR_BASE + 0x10L);
}
static inline void MMIO_inst_tap1_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x10L);
}
#define CSR_MMIO_INST_VELOCITY2_ADDR (CSR_BASE + 0x14L)
#define CSR_MMIO_INST_VELOCITY2_SIZE 1
static inline uint32_t MMIO_inst_velocity2_read(void) {
	return csr_read_simple(CSR_BASE + 0x14L);
}
static inline void MMIO_inst_velocity2_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x14L);
}
#define CSR_MMIO_INST_DIRTIME2_ADDR (CSR_BASE + 0x18L)
#define CSR_MMIO_INST_DIRTIME2_SIZE 1
static inline uint32_t MMIO_inst_dirtime2_read(void) {
	return csr_read_simple(CSR_BASE + 0x18L);
}
static inline void MMIO_inst_dirtime2_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x18L);
}
#define CSR_MMIO_INST_STEPTIME2_ADDR (CSR_BASE + 0x1cL)
#define CSR_MMIO_INST_STEPTIME2_SIZE 1
static inline uint32_t MMIO_inst_steptime2_read(void) {
	return csr_read_simple(CSR_BASE + 0x1cL);
}
static inline void MMIO_inst_steptime2_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1cL);
}
#define CSR_MMIO_INST_ENABLE2_ADDR (CSR_BASE + 0x20L)
#define CSR_MMIO_INST_ENABLE2_SIZE 1
static inline uint32_t MMIO_inst_enable2_read(void) {
	return csr_read_simple(CSR_BASE + 0x20L);
}
static inline void MMIO_inst_enable2_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x20L);
}
#define CSR_MMIO_INST_TAP2_ADDR (CSR_BASE + 0x24L)
#define CSR_MMIO_INST_TAP2_SIZE 1
static inline uint32_t MMIO_inst_tap2_read(void) {
	return csr_read_simple(CSR_BASE + 0x24L);
}
static inline void MMIO_inst_tap2_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x24L);
}
#define CSR_MMIO_INST_VELOCITY3_ADDR (CSR_BASE + 0x28L)
#define CSR_MMIO_INST_VELOCITY3_SIZE 1
static inline uint32_t MMIO_inst_velocity3_read(void) {
	return csr_read_simple(CSR_BASE + 0x28L);
}
static inline void MMIO_inst_velocity3_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x28L);
}
#define CSR_MMIO_INST_DIRTIME3_ADDR (CSR_BASE + 0x2cL)
#define CSR_MMIO_INST_DIRTIME3_SIZE 1
static inline uint32_t MMIO_inst_dirtime3_read(void) {
	return csr_read_simple(CSR_BASE + 0x2cL);
}
static inline void MMIO_inst_dirtime3_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2cL);
}
#define CSR_MMIO_INST_STEPTIME3_ADDR (CSR_BASE + 0x30L)
#define CSR_MMIO_INST_STEPTIME3_SIZE 1
static inline uint32_t MMIO_inst_steptime3_read(void) {
	return csr_read_simple(CSR_BASE + 0x30L);
}
static inline void MMIO_inst_steptime3_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x30L);
}
#define CSR_MMIO_INST_ENABLE3_ADDR (CSR_BASE + 0x34L)
#define CSR_MMIO_INST_ENABLE3_SIZE 1
static inline uint32_t MMIO_inst_enable3_read(void) {
	return csr_read_simple(CSR_BASE + 0x34L);
}
static inline void MMIO_inst_enable3_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x34L);
}
#define CSR_MMIO_INST_TAP3_ADDR (CSR_BASE + 0x38L)
#define CSR_MMIO_INST_TAP3_SIZE 1
static inline uint32_t MMIO_inst_tap3_read(void) {
	return csr_read_simple(CSR_BASE + 0x38L);
}
static inline void MMIO_inst_tap3_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x38L);
}
#define CSR_MMIO_INST_VELOCITY4_ADDR (CSR_BASE + 0x3cL)
#define CSR_MMIO_INST_VELOCITY4_SIZE 1
static inline uint32_t MMIO_inst_velocity4_read(void) {
	return csr_read_simple(CSR_BASE + 0x3cL);
}
static inline void MMIO_inst_velocity4_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3cL);
}
#define CSR_MMIO_INST_DIRTIME4_ADDR (CSR_BASE + 0x40L)
#define CSR_MMIO_INST_DIRTIME4_SIZE 1
static inline uint32_t MMIO_inst_dirtime4_read(void) {
	return csr_read_simple(CSR_BASE + 0x40L);
}
static inline void MMIO_inst_dirtime4_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x40L);
}
#define CSR_MMIO_INST_STEPTIME4_ADDR (CSR_BASE + 0x44L)
#define CSR_MMIO_INST_STEPTIME4_SIZE 1
static inline uint32_t MMIO_inst_steptime4_read(void) {
	return csr_read_simple(CSR_BASE + 0x44L);
}
static inline void MMIO_inst_steptime4_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x44L);
}
#define CSR_MMIO_INST_ENABLE4_ADDR (CSR_BASE + 0x48L)
#define CSR_MMIO_INST_ENABLE4_SIZE 1
static inline uint32_t MMIO_inst_enable4_read(void) {
	return csr_read_simple(CSR_BASE + 0x48L);
}
static inline void MMIO_inst_enable4_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x48L);
}
#define CSR_MMIO_INST_TAP4_ADDR (CSR_BASE + 0x4cL)
#define CSR_MMIO_INST_TAP4_SIZE 1
static inline uint32_t MMIO_inst_tap4_read(void) {
	return csr_read_simple(CSR_BASE + 0x4cL);
}
static inline void MMIO_inst_tap4_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4cL);
}
#define CSR_MMIO_INST_VELOCITY5_ADDR (CSR_BASE + 0x50L)
#define CSR_MMIO_INST_VELOCITY5_SIZE 1
static inline uint32_t MMIO_inst_velocity5_read(void) {
	return csr_read_simple(CSR_BASE + 0x50L);
}
static inline void MMIO_inst_velocity5_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x50L);
}
#define CSR_MMIO_INST_DIRTIME5_ADDR (CSR_BASE + 0x54L)
#define CSR_MMIO_INST_DIRTIME5_SIZE 1
static inline uint32_t MMIO_inst_dirtime5_read(void) {
	return csr_read_simple(CSR_BASE + 0x54L);
}
static inline void MMIO_inst_dirtime5_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x54L);
}
#define CSR_MMIO_INST_STEPTIME5_ADDR (CSR_BASE + 0x58L)
#define CSR_MMIO_INST_STEPTIME5_SIZE 1
static inline uint32_t MMIO_inst_steptime5_read(void) {
	return csr_read_simple(CSR_BASE + 0x58L);
}
static inline void MMIO_inst_steptime5_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x58L);
}
#define CSR_MMIO_INST_ENABLE5_ADDR (CSR_BASE + 0x5cL)
#define CSR_MMIO_INST_ENABLE5_SIZE 1
static inline uint32_t MMIO_inst_enable5_read(void) {
	return csr_read_simple(CSR_BASE + 0x5cL);
}
static inline void MMIO_inst_enable5_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5cL);
}
#define CSR_MMIO_INST_TAP5_ADDR (CSR_BASE + 0x60L)
#define CSR_MMIO_INST_TAP5_SIZE 1
static inline uint32_t MMIO_inst_tap5_read(void) {
	return csr_read_simple(CSR_BASE + 0x60L);
}
static inline void MMIO_inst_tap5_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x60L);
}
#define CSR_MMIO_INST_VELOCITY6_ADDR (CSR_BASE + 0x64L)
#define CSR_MMIO_INST_VELOCITY6_SIZE 1
static inline uint32_t MMIO_inst_velocity6_read(void) {
	return csr_read_simple(CSR_BASE + 0x64L);
}
static inline void MMIO_inst_velocity6_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x64L);
}
#define CSR_MMIO_INST_DIRTIME6_ADDR (CSR_BASE + 0x68L)
#define CSR_MMIO_INST_DIRTIME6_SIZE 1
static inline uint32_t MMIO_inst_dirtime6_read(void) {
	return csr_read_simple(CSR_BASE + 0x68L);
}
static inline void MMIO_inst_dirtime6_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x68L);
}
#define CSR_MMIO_INST_STEPTIME6_ADDR (CSR_BASE + 0x6cL)
#define CSR_MMIO_INST_STEPTIME6_SIZE 1
static inline uint32_t MMIO_inst_steptime6_read(void) {
	return csr_read_simple(CSR_BASE + 0x6cL);
}
static inline void MMIO_inst_steptime6_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x6cL);
}
#define CSR_MMIO_INST_ENABLE6_ADDR (CSR_BASE + 0x70L)
#define CSR_MMIO_INST_ENABLE6_SIZE 1
static inline uint32_t MMIO_inst_enable6_read(void) {
	return csr_read_simple(CSR_BASE + 0x70L);
}
static inline void MMIO_inst_enable6_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x70L);
}
#define CSR_MMIO_INST_TAP6_ADDR (CSR_BASE + 0x74L)
#define CSR_MMIO_INST_TAP6_SIZE 1
static inline uint32_t MMIO_inst_tap6_read(void) {
	return csr_read_simple(CSR_BASE + 0x74L);
}
static inline void MMIO_inst_tap6_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x74L);
}
#define CSR_MMIO_INST_POSITION1_ADDR (CSR_BASE + 0x78L)
#define CSR_MMIO_INST_POSITION1_SIZE 1
static inline uint32_t MMIO_inst_position1_read(void) {
	return csr_read_simple(CSR_BASE + 0x78L);
}
static inline void MMIO_inst_position1_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x78L);
}
#define CSR_MMIO_INST_POSITION2_ADDR (CSR_BASE + 0x7cL)
#define CSR_MMIO_INST_POSITION2_SIZE 1
static inline uint32_t MMIO_inst_position2_read(void) {
	return csr_read_simple(CSR_BASE + 0x7cL);
}
static inline void MMIO_inst_position2_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x7cL);
}
#define CSR_MMIO_INST_POSITION3_ADDR (CSR_BASE + 0x80L)
#define CSR_MMIO_INST_POSITION3_SIZE 1
static inline uint32_t MMIO_inst_position3_read(void) {
	return csr_read_simple(CSR_BASE + 0x80L);
}
static inline void MMIO_inst_position3_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x80L);
}
#define CSR_MMIO_INST_POSITION4_ADDR (CSR_BASE + 0x84L)
#define CSR_MMIO_INST_POSITION4_SIZE 1
static inline uint32_t MMIO_inst_position4_read(void) {
	return csr_read_simple(CSR_BASE + 0x84L);
}
static inline void MMIO_inst_position4_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x84L);
}
#define CSR_MMIO_INST_POSITION5_ADDR (CSR_BASE + 0x88L)
#define CSR_MMIO_INST_POSITION5_SIZE 1
static inline uint32_t MMIO_inst_position5_read(void) {
	return csr_read_simple(CSR_BASE + 0x88L);
}
static inline void MMIO_inst_position5_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x88L);
}
#define CSR_MMIO_INST_POSITION6_ADDR (CSR_BASE + 0x8cL)
#define CSR_MMIO_INST_POSITION6_SIZE 1
static inline uint32_t MMIO_inst_position6_read(void) {
	return csr_read_simple(CSR_BASE + 0x8cL);
}
static inline void MMIO_inst_position6_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x8cL);
}

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x800L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x800L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple(CSR_BASE + 0x800L);
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x800L);
}
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
static inline uint32_t ctrl_reset_soc_rst_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ctrl_reset_soc_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_soc_rst_extract(word);
}
static inline uint32_t ctrl_reset_soc_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ctrl_reset_soc_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_soc_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1
static inline uint32_t ctrl_reset_cpu_rst_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ctrl_reset_cpu_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_cpu_rst_extract(word);
}
static inline uint32_t ctrl_reset_cpu_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ctrl_reset_cpu_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_cpu_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x804L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple(CSR_BASE + 0x804L);
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x804L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x808L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple(CSR_BASE + 0x808L);
}

/* encoder1 */
#define CSR_ENCODER1_BASE (CSR_BASE + 0x1000L)
#define CSR_ENCODER1_OUT_ADDR (CSR_BASE + 0x1000L)
#define CSR_ENCODER1_OUT_SIZE 1
static inline uint32_t encoder1_out_read(void) {
	return csr_read_simple(CSR_BASE + 0x1000L);
}
static inline void encoder1_out_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1000L);
}

/* encoder2 */
#define CSR_ENCODER2_BASE (CSR_BASE + 0x1800L)
#define CSR_ENCODER2_OUT_ADDR (CSR_BASE + 0x1800L)
#define CSR_ENCODER2_OUT_SIZE 1
static inline uint32_t encoder2_out_read(void) {
	return csr_read_simple(CSR_BASE + 0x1800L);
}
static inline void encoder2_out_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1800L);
}

/* encoder3 */
#define CSR_ENCODER3_BASE (CSR_BASE + 0x2000L)
#define CSR_ENCODER3_OUT_ADDR (CSR_BASE + 0x2000L)
#define CSR_ENCODER3_OUT_SIZE 1
static inline uint32_t encoder3_out_read(void) {
	return csr_read_simple(CSR_BASE + 0x2000L);
}
static inline void encoder3_out_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2000L);
}

/* encoder4 */
#define CSR_ENCODER4_BASE (CSR_BASE + 0x2800L)
#define CSR_ENCODER4_OUT_ADDR (CSR_BASE + 0x2800L)
#define CSR_ENCODER4_OUT_SIZE 1
static inline uint32_t encoder4_out_read(void) {
	return csr_read_simple(CSR_BASE + 0x2800L);
}
static inline void encoder4_out_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2800L);
}

/* encoder5 */
#define CSR_ENCODER5_BASE (CSR_BASE + 0x3000L)
#define CSR_ENCODER5_OUT_ADDR (CSR_BASE + 0x3000L)
#define CSR_ENCODER5_OUT_SIZE 1
static inline uint32_t encoder5_out_read(void) {
	return csr_read_simple(CSR_BASE + 0x3000L);
}
static inline void encoder5_out_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3000L);
}

/* encoder6 */
#define CSR_ENCODER6_BASE (CSR_BASE + 0x3800L)
#define CSR_ENCODER6_OUT_ADDR (CSR_BASE + 0x3800L)
#define CSR_ENCODER6_OUT_SIZE 1
static inline uint32_t encoder6_out_read(void) {
	return csr_read_simple(CSR_BASE + 0x3800L);
}
static inline void encoder6_out_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3800L);
}

/* ethphy */
#define CSR_ETHPHY_BASE (CSR_BASE + 0x4000L)
#define CSR_ETHPHY_CRG_RESET_ADDR (CSR_BASE + 0x4000L)
#define CSR_ETHPHY_CRG_RESET_SIZE 1
static inline uint32_t ethphy_crg_reset_read(void) {
	return csr_read_simple(CSR_BASE + 0x4000L);
}
static inline void ethphy_crg_reset_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4000L);
}
#define CSR_ETHPHY_RX_INBAND_STATUS_ADDR (CSR_BASE + 0x4004L)
#define CSR_ETHPHY_RX_INBAND_STATUS_SIZE 1
static inline uint32_t ethphy_rx_inband_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x4004L);
}
#define CSR_ETHPHY_RX_INBAND_STATUS_LINK_STATUS_OFFSET 0
#define CSR_ETHPHY_RX_INBAND_STATUS_LINK_STATUS_SIZE 1
static inline uint32_t ethphy_rx_inband_status_link_status_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ethphy_rx_inband_status_link_status_read(void) {
	uint32_t word = ethphy_rx_inband_status_read();
	return ethphy_rx_inband_status_link_status_extract(word);
}
#define CSR_ETHPHY_RX_INBAND_STATUS_CLOCK_SPEED_OFFSET 1
#define CSR_ETHPHY_RX_INBAND_STATUS_CLOCK_SPEED_SIZE 1
static inline uint32_t ethphy_rx_inband_status_clock_speed_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ethphy_rx_inband_status_clock_speed_read(void) {
	uint32_t word = ethphy_rx_inband_status_read();
	return ethphy_rx_inband_status_clock_speed_extract(word);
}
#define CSR_ETHPHY_RX_INBAND_STATUS_DUPLEX_STATUS_OFFSET 2
#define CSR_ETHPHY_RX_INBAND_STATUS_DUPLEX_STATUS_SIZE 1
static inline uint32_t ethphy_rx_inband_status_duplex_status_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t ethphy_rx_inband_status_duplex_status_read(void) {
	uint32_t word = ethphy_rx_inband_status_read();
	return ethphy_rx_inband_status_duplex_status_extract(word);
}
#define CSR_ETHPHY_MDIO_W_ADDR (CSR_BASE + 0x4008L)
#define CSR_ETHPHY_MDIO_W_SIZE 1
static inline uint32_t ethphy_mdio_w_read(void) {
	return csr_read_simple(CSR_BASE + 0x4008L);
}
static inline void ethphy_mdio_w_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4008L);
}
#define CSR_ETHPHY_MDIO_W_MDC_OFFSET 0
#define CSR_ETHPHY_MDIO_W_MDC_SIZE 1
static inline uint32_t ethphy_mdio_w_mdc_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ethphy_mdio_w_mdc_read(void) {
	uint32_t word = ethphy_mdio_w_read();
	return ethphy_mdio_w_mdc_extract(word);
}
static inline uint32_t ethphy_mdio_w_mdc_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ethphy_mdio_w_mdc_write(uint32_t plain_value) {
	uint32_t oldword = ethphy_mdio_w_read();
	uint32_t newword = ethphy_mdio_w_mdc_replace(oldword, plain_value);
	ethphy_mdio_w_write(newword);
}
#define CSR_ETHPHY_MDIO_W_OE_OFFSET 1
#define CSR_ETHPHY_MDIO_W_OE_SIZE 1
static inline uint32_t ethphy_mdio_w_oe_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ethphy_mdio_w_oe_read(void) {
	uint32_t word = ethphy_mdio_w_read();
	return ethphy_mdio_w_oe_extract(word);
}
static inline uint32_t ethphy_mdio_w_oe_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ethphy_mdio_w_oe_write(uint32_t plain_value) {
	uint32_t oldword = ethphy_mdio_w_read();
	uint32_t newword = ethphy_mdio_w_oe_replace(oldword, plain_value);
	ethphy_mdio_w_write(newword);
}
#define CSR_ETHPHY_MDIO_W_W_OFFSET 2
#define CSR_ETHPHY_MDIO_W_W_SIZE 1
static inline uint32_t ethphy_mdio_w_w_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t ethphy_mdio_w_w_read(void) {
	uint32_t word = ethphy_mdio_w_read();
	return ethphy_mdio_w_w_extract(word);
}
static inline uint32_t ethphy_mdio_w_w_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void ethphy_mdio_w_w_write(uint32_t plain_value) {
	uint32_t oldword = ethphy_mdio_w_read();
	uint32_t newword = ethphy_mdio_w_w_replace(oldword, plain_value);
	ethphy_mdio_w_write(newword);
}
#define CSR_ETHPHY_MDIO_R_ADDR (CSR_BASE + 0x400cL)
#define CSR_ETHPHY_MDIO_R_SIZE 1
static inline uint32_t ethphy_mdio_r_read(void) {
	return csr_read_simple(CSR_BASE + 0x400cL);
}
#define CSR_ETHPHY_MDIO_R_R_OFFSET 0
#define CSR_ETHPHY_MDIO_R_R_SIZE 1
static inline uint32_t ethphy_mdio_r_r_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ethphy_mdio_r_r_read(void) {
	uint32_t word = ethphy_mdio_r_read();
	return ethphy_mdio_r_r_extract(word);
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0x4800L)

#endif
