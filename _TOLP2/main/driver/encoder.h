/********************************************************************
* Description:  encoder.h
*               A Litex-CNC component that canm be used to measure 
*               position by counting the pulses generated by a 
*               quadrature encoder. 
*
* Author: Peter van Tol <petertgvantol AT gmail DOT com>
* License: GPL Version 2
*    
* Copyright (c) 2022 All rights reserved.
*
********************************************************************/

/** This program is free software; you can redistribute it and/or
    modify it under the terms of version 2 of the GNU General
    Public License as published by the Free Software Foundation.
    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

    THE AUTHORS OF THIS LIBRARY ACCEPT ABSOLUTELY NO LIABILITY FOR
    ANY HARM OR LOSS RESULTING FROM ITS USE.  IT IS _EXTREMELY_ UNWISE
    TO RELY ON SOFTWARE ALONE FOR SAFETY.  Any machinery capable of
    harming persons must have provisions for completely removing power
    from all motors, etc, before persons enter any danger area.  All
    machinery must be designed to comply with local and national safety
    codes, and the authors of this software can not, and do not, take
    any responsibility for such compliance.

    This code was written as part of the LiteX-CNC project.
*/

#ifndef __INCLUDE_LITEXCNC_ENCODER_H__
#define __INCLUDE_LITEXCNC_ENCODER_H__

#include "litexcnc.h"


// Defines the structure of the PWM instance
typedef struct {
    struct {

        struct {
            /* Position in encoder counts. */
            hal_s32_t *counts; 
            /* When true, counts and position are reset to zero on the next rising edge of
             * Phase-Z. At the same time, index-enable is reset to zero to indicate that
             * the rising edge has occurred. 
             */             
            hal_bit_t *index_enable;
            /* Determine the minimum speed at which velocity will be estimated as nonzero 
             * and postition-interpolated will be interpolated. The units of min-speed-estimate 
             * are the same as the units of velocity. Setting this parameter too low will cause 
             * it to take a long time for velocity to go to 0 after encoder pulses have stopped 
             * arriving. Default value: 1.0 
             */       
            hal_float_t *min_speed_est;
            /* Position in scaled units (see position-scale) */ 
            hal_float_t *position;
            /* Scale factor, in counts per length unit. For example, if position-scale is 500, 
             *then 1000 counts of the encoder will be reported as a position of 2.0 units.
             */ 
            hal_float_t *position_scale;
            /* The raw count, as read from the FPGA. It is also unaffected by reset or the index 
             * pulse.
             */
            hal_s32_t *raw_counts; 
            /* When true, counts and position are reset to zero immediately. NOTE: the value on the
             * FPGA and thus raw_counts is not affected by this reset.
             */
            hal_bit_t *reset;
            /* Velocity in scaled units per second. encoder uses an algorithm that greatly reduces
             * quantization noise as compared to simply differentiating the position output. When 
             * the magnitude of the true velocity is below min-speed-estimate, the velocity output 
             * is 0.
             */
            hal_float_t *velocity;
            /* Velocity in scaled units per minute. Simply encoder.N.velocity scaled by a factor 
             * of 60 for convenience.
             */
            hal_float_t *velocity_rpm;
            /* Enables times-4 mode. When true (the default), the counter counts each edge of the
             * quadrature waveform (four counts per full cycle). When false, it only counts once 
             * per full cycle. NOTE: this function is implemented by dividing applying an integer
             * division of 4 between raw_counts and counts.
             */
            hal_bit_t *x4_mode;
        } pin;

        struct {
            // No parameters
        } param;

    } hal;

    // This struct holds all old values (memoization) 
    struct {
        hal_float_t position_scale;
    } memo;

    // This struct contains data, both calculated and direct received from the FPGA
    struct {
        hal_float_t position_scale_recip;
    } data;
    
} litexcnc_encoder_pin_t;


// Defines the PWM, contains a collection of PWM instances
typedef struct {
    // Input pins
    int num_instances;
    litexcnc_encoder_pin_t *instances;

    struct {
        long period;
    } memo;
    
    // Struct containing pre-calculated values
    struct {
        float recip_dt;
    } data;

} litexcnc_encoder_t;


// Defines the data-package for sending the settings for a single step generator. The
// order of this package MUST coincide with the order in the MMIO definition.
// - write
#define LITEXCNC_BOARD_ENCODER_DATA_WRITE_SIZE(litexcnc) 0 // No data is written to the card for the encoder
// - read
typedef struct {
    int64_t counts;
} litexcnc_encoder_instance_read_data_t;
#define LITEXCNC_BOARD_ENCODER_DATA_READ_SIZE(litexcnc) sizeof(litexcnc_encoder_instance_read_data_t)*litexcnc->encoder.num_instances 


// Functions for creating, reading and writing stepgen pins
int litexcnc_encoder_init(litexcnc_t *litexcnc, json_object *config);
uint8_t litexcnc_encoder_prepare_write(litexcnc_t *litexcnc, uint8_t **data, long period);
uint8_t litexcnc_encoder_process_read(litexcnc_t *litexcnc, uint8_t** data, long period);

#endif